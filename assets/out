#!/bin/bash
#!/bin/sh -u
set -ex
exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=$(cat)

# extract variables from json
dockerswarm_user=$(echo $payload | jq -r '.source.DOCKERSWARM_USER')
dockerswarm_hostname=$(echo $payload | jq -r '.source.DOCKERSWARM_HOSTNAME')

dockerhub_user=$(echo $payload | jq -r '.source.DOCKERHUB_USER')
dockerhub_password=$(echo $payload | jq -r '.source.DOCKERHUB_PASSWORD')
stack_name=$(echo $payload | jq -r '.source.STACK_NAME')
environment=$(echo $payload | jq -r '.source.ENVIRONMENT')
dockerswarm_key=$(echo $payload | jq -r '.source.DOCKERSWARM_KEY')

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo --- SERVICE INFO ---
echo swarm hostname: ${dockerswarm_hostname}
echo swarm stack name: ${stack_name}
echo swarm environment: ${environment}
echo runner hostname $(hostname)
echo concourse pipeline name: ${GREEN} ${BUILD_PIPELINE_NAME} ${NC}
echo concourse team name: ${BUILD_TEAM_NAME}
echo concourse job name: ${BUILD_JOB_NAME}
echo concourse build number: ${BUILD_NAME}
echo concourse build id: ${BUILD_ID}
echo --- END ---

if [ ${environment} == "null" ] && [ "${stack_name}" == "null" ] && [ "${dockerswarm_hostname}" == "null" ] ; 
  then
    echo "error: source.environment is missing"
    exit 1
fi

#set -v
# docker-tunnel needs key at /tmp/key
echo ${dockerswarm_key} | sed -e 's/\(KEY-----\)\s/\1\n/g; s/\s\(-----END\)/\n\1/g' | sed -e '2s/\s\+/\n/g' > /tmp/key
chmod 0600 /tmp/key

echo "establishing ssh tunbel"
# https://hub.docker.com/r/ruanbekker/docker-remote-tunnel
docker-tunnel --connect "${dockerswarm_user}"@"${dockerswarm_hostname}"
# export docker_host
source /root/.docker-tunnel.sh
sleep 2
echo "Deploying ${stack_name}"
docker login -u ${dockerhub_user} -p ${dockerhub_password}
$cat /tmp/build/put/main-repo/ci/docker-compose.production.yml
echo "path to data: /tmp/${BUILD_JOB_NAME}/put/main-repo"
# ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i /tmp/key -NL localhost:2376:/var/run/docker.sock
docker stack deploy --prune -c /tmp/build/put/main-repo/ci/docker-compose.${environment}.yml ${stack_name} --with-registry-auth
echo "terminating sshtunnel"
screen -S sshtunnel -X quit

echo "cleaning up"
rm -rf /tmp/key

echo '{ "version": { "ref": "'$BUILD_ID'" } }' >&3
